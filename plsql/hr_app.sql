--------------------------------------------------------
--  File created - czwartek-marca-27-2025   
--------------------------------------------------------
DROP SEQUENCE "HR_APP"."INCREMENT_DEPARTMENT";
DROP SEQUENCE "HR_APP"."INCREMENT_EMPLOYEE";
DROP SEQUENCE "HR_APP"."INCREMENT_PROFILE";
DROP SEQUENCE "HR_APP"."INCREMENT_PROJECT";
DROP SEQUENCE "HR_APP"."INCREMENT_REQUEST";
DROP SEQUENCE "HR_APP"."INCREMENT_ROLE";
DROP SEQUENCE "HR_APP"."INCREMENT_TASK";
DROP SEQUENCE "HR_APP"."INCREMENT_USER";
DROP TABLE "HR_APP"."DEPARTMENTS" cascade constraints;
DROP TABLE "HR_APP"."DICTIONARIES" cascade constraints;
DROP TABLE "HR_APP"."DICTIONARY_VALUES" cascade constraints;
DROP TABLE "HR_APP"."EMPLOYEES" cascade constraints;
DROP TABLE "HR_APP"."PROFILES" cascade constraints;
DROP TABLE "HR_APP"."PROJECT_EMPLOYEES" cascade constraints;
DROP TABLE "HR_APP"."PROJECTS" cascade constraints;
DROP TABLE "HR_APP"."REQUESTS_TIME_OFF" cascade constraints;
DROP TABLE "HR_APP"."ROLES" cascade constraints;
DROP TABLE "HR_APP"."TASKS" cascade constraints;
DROP TABLE "HR_APP"."USER_ROLES" cascade constraints;
DROP TABLE "HR_APP"."USERS" cascade constraints;
DROP PROCEDURE "HR_APP"."ASSIGN_EMPLOYEE_TO_PROJECT";
DROP PROCEDURE "HR_APP"."DELETE_DEPARTMENT";
DROP PROCEDURE "HR_APP"."DELETE_EMPLOYEE";
DROP PROCEDURE "HR_APP"."DELETE_PROFILE";
DROP PROCEDURE "HR_APP"."DELETE_PROJECT";
DROP PROCEDURE "HR_APP"."DELETE_REQUEST_TIME_OFF";
DROP PROCEDURE "HR_APP"."DELETE_ROLE";
DROP PROCEDURE "HR_APP"."DELETE_TASK";
DROP PROCEDURE "HR_APP"."DELETE_USER";
DROP PROCEDURE "HR_APP"."NEW_DEPARTMENT";
DROP PROCEDURE "HR_APP"."NEW_EMPLOYEE";
DROP PROCEDURE "HR_APP"."NEW_PROFILE";
DROP PROCEDURE "HR_APP"."NEW_PROJECT";
DROP PROCEDURE "HR_APP"."NEW_REQUEST_TIME_OFF";
DROP PROCEDURE "HR_APP"."NEW_ROLE";
DROP PROCEDURE "HR_APP"."NEW_TASK";
DROP PROCEDURE "HR_APP"."NEW_USER";
DROP PROCEDURE "HR_APP"."UPDATE_ASSIGN_EMPLOYEE_TO_PROJECT";
DROP PROCEDURE "HR_APP"."UPDATE_DEPARTMENT";
DROP PROCEDURE "HR_APP"."UPDATE_EMPLOYEE";
DROP PROCEDURE "HR_APP"."UPDATE_PROFILE";
DROP PROCEDURE "HR_APP"."UPDATE_PROJECT";
DROP PROCEDURE "HR_APP"."UPDATE_REQUEST_TIME_OFF";
DROP PROCEDURE "HR_APP"."UPDATE_ROLE";
DROP PROCEDURE "HR_APP"."UPDATE_TASK";
DROP PROCEDURE "HR_APP"."UPDATE_USER";
DROP PROCEDURE "HR_APP"."UPDATE_USER_ROLES";
--------------------------------------------------------
--  DDL for Sequence INCREMENT_DEPARTMENT
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_DEPARTMENT"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 5 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INCREMENT_EMPLOYEE
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_EMPLOYEE"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 10 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INCREMENT_PROFILE
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_PROFILE"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 8 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INCREMENT_PROJECT
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_PROJECT"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 5 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INCREMENT_REQUEST
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_REQUEST"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 7 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INCREMENT_ROLE
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_ROLE"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 5 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INCREMENT_TASK
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_TASK"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 16 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INCREMENT_USER
--------------------------------------------------------

   CREATE SEQUENCE  "HR_APP"."INCREMENT_USER"  MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 9 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table DEPARTMENTS
--------------------------------------------------------

  CREATE TABLE "HR_APP"."DEPARTMENTS" 
   (	"ID" NUMBER DEFAULT "HR_APP"."INCREMENT_DEPARTMENT"."NEXTVAL", 
	"NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DICTIONARIES
--------------------------------------------------------

  CREATE TABLE "HR_APP"."DICTIONARIES" 
   (	"ID" NUMBER, 
	"DICTIONARY_NAME" VARCHAR2(30 BYTE), 
	"DICTIONARY_CODE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DICTIONARY_VALUES
--------------------------------------------------------

  CREATE TABLE "HR_APP"."DICTIONARY_VALUES" 
   (	"ID" NUMBER, 
	"DICTIONARY_ID" NUMBER, 
	"VALUE" VARCHAR2(30 BYTE), 
	"DESCRIPTION" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLOYEES
--------------------------------------------------------

  CREATE TABLE "HR_APP"."EMPLOYEES" 
   (	"ID" NUMBER DEFAULT "HR_APP"."INCREMENT_EMPLOYEE"."NEXTVAL", 
	"NAME" VARCHAR2(50 BYTE), 
	"DEPARTMENT" VARCHAR2(20 BYTE), 
	"DEPARTMENT_ID" NUMBER, 
	"POSITION" VARCHAR2(20 BYTE), 
	"STAFF_ID" NUMBER, 
	"TYPE_OF_CONTRACT" VARCHAR2(40 BYTE), 
	"IMAGE" VARCHAR2(255 BYTE), 
	"PHONE" VARCHAR2(9 BYTE), 
	"ADDRESS" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROFILES
--------------------------------------------------------

  CREATE TABLE "HR_APP"."PROFILES" 
   (	"ID" NUMBER, 
	"NAME" VARCHAR2(50 BYTE), 
	"DESTINATION" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE), 
	"GENDER" VARCHAR2(30 BYTE), 
	"STAFF_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"IMAGE" VARCHAR2(255 BYTE), 
	"PHONE" VARCHAR2(9 BYTE), 
	"ADDRESS" VARCHAR2(150 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROJECT_EMPLOYEES
--------------------------------------------------------

  CREATE TABLE "HR_APP"."PROJECT_EMPLOYEES" 
   (	"PROJECT_ID" NUMBER, 
	"EMPLOYEE_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROJECTS
--------------------------------------------------------

  CREATE TABLE "HR_APP"."PROJECTS" 
   (	"ID" NUMBER, 
	"NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REQUESTS_TIME_OFF
--------------------------------------------------------

  CREATE TABLE "HR_APP"."REQUESTS_TIME_OFF" 
   (	"ID" NUMBER DEFAULT "HR_APP"."INCREMENT_REQUEST"."NEXTVAL", 
	"LEAVE_TYPE" VARCHAR2(255 BYTE), 
	"REASON" VARCHAR2(255 BYTE), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"STATUS" VARCHAR2(50 BYTE), 
	"EMPLOYEE_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROLES
--------------------------------------------------------

  CREATE TABLE "HR_APP"."ROLES" 
   (	"NAME" VARCHAR2(50 BYTE), 
	"ID" NUMBER DEFAULT "HR_APP"."INCREMENT_ROLE"."NEXTVAL"
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TASKS
--------------------------------------------------------

  CREATE TABLE "HR_APP"."TASKS" 
   (	"ID" NUMBER DEFAULT "HR_APP"."INCREMENT_TASK"."NEXTVAL", 
	"NAME" VARCHAR2(50 BYTE), 
	"STATUS" VARCHAR2(30 BYTE), 
	"ESTIMATED_TASK_TIME_END" DATE, 
	"ESTIMATED_WORK_TIME" DATE, 
	"PRIORITY_STATUS" VARCHAR2(30 BYTE), 
	"START_DATE" DATE, 
	"TYPE_TASK" VARCHAR2(30 BYTE), 
	"PROJECT_ID" NUMBER, 
	"EMPLOYEE_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USER_ROLES
--------------------------------------------------------

  CREATE TABLE "HR_APP"."USER_ROLES" 
   (	"USER_ID" NUMBER, 
	"ROLE_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "HR_APP"."USERS" 
   (	"ID" NUMBER DEFAULT "HR_APP"."INCREMENT_USER"."NEXTVAL", 
	"EMAIL" VARCHAR2(50 BYTE), 
	"PASSWORD" VARCHAR2(120 BYTE), 
	"USERNAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into HR_APP.DEPARTMENTS
SET DEFINE OFF;
Insert into HR_APP.DEPARTMENTS (ID,NAME) values ('1','IT');
Insert into HR_APP.DEPARTMENTS (ID,NAME) values ('2','HR');
Insert into HR_APP.DEPARTMENTS (ID,NAME) values ('4','UX/UI');
REM INSERTING into HR_APP.DICTIONARIES
SET DEFINE OFF;
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('1','Position','POS');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('2','Department','DEP');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('3','Contract','CON');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('4','Leave','LEV');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('6','Status','STA');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('5','Gender','GEN');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('7','Status priority ','PRS');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('8','Type task','TAS');
Insert into HR_APP.DICTIONARIES (ID,DICTIONARY_NAME,DICTIONARY_CODE) values ('9','Status request','SRE');
REM INSERTING into HR_APP.DICTIONARY_VALUES
SET DEFINE OFF;
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('1','1','JUNIOR','Junior');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('2','1','MID','Mid');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('3','1','SERNIOR','Senior');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('4','2','HR','Hr');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('5','2','IT','IT');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('6','2','DESIGNER','Designer');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('7','3','B2B','B2B');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('8','3','FULL_TIME_CONTRACT','Full time contract');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('9','3','CONTRACT_FOR_SPECIFIC_WORK','Contract for specific work');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('10','3','FEE_FOR_TASK_AGREEMENT','Fee for task agreement');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('11','4','ANNUAL_LEAVE','Annual leave');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('12','4','CASUAL_LEAVE','Casual leave');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('13','4','PAID_TIME_OFF','Paid time off');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('14','4','SICK_LEAVE','Sick leave');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('15','4','UNPAID_LEAVE','Unpaid leave');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('16','5','MALE','Male');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('17','5','FEMALE','Female');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('18','5','OTHER','Other');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('19','6','NEW','New');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('20','6','WORK_IN_PROGRESS','Work in progress');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('21','6','DONE','Done');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('25','8','NORMAL','Normal');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('26','8','FAULT','Fault');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('22','7','NORMAL','Normal');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('23','7','HIGH','High');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('24','7','LOW','Low');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('27','9','PENDING','Pending');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('28','9','APPROVE','Approve');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('29','9','REJECT','Reject');
Insert into HR_APP.DICTIONARY_VALUES (ID,DICTIONARY_ID,VALUE,DESCRIPTION) values ('30','9','DRAFT','Draft');
REM INSERTING into HR_APP.EMPLOYEES
SET DEFINE OFF;
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('1','Test test',null,null,null,null,null,null,null,null);
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('2','TEST_PROFILE6',null,null,'JUNIOR',null,null,null,null,null);
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('5','Test test4',null,null,'MID',null,null,null,null,null);
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('4','Test test3',null,null,null,null,null,null,null,null);
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('6','Test test5',null,null,'MID',null,null,null,null,null);
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('7','Test test7','HR',null,'MID',null,null,null,null,null);
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('8','TEST_PROFILE8',null,null,'MID',null,'FULL_TIME_CONTRACT',null,null,null);
Insert into HR_APP.EMPLOYEES (ID,NAME,DEPARTMENT,DEPARTMENT_ID,POSITION,STAFF_ID,TYPE_OF_CONTRACT,IMAGE,PHONE,ADDRESS) values ('9','TEST_PROFILE6',null,null,'JUNIOR',null,null,null,null,null);
REM INSERTING into HR_APP.PROFILES
SET DEFINE OFF;
Insert into HR_APP.PROFILES (ID,NAME,DESTINATION,EMAIL,GENDER,STAFF_ID,USER_ID,IMAGE,PHONE,ADDRESS) values ('1','TEST_PROFILE1',null,null,null,null,null,null,null,null);
Insert into HR_APP.PROFILES (ID,NAME,DESTINATION,EMAIL,GENDER,STAFF_ID,USER_ID,IMAGE,PHONE,ADDRESS) values ('2','TEST_PROFILE',null,'test6@test.com',null,null,null,null,null,null);
Insert into HR_APP.PROFILES (ID,NAME,DESTINATION,EMAIL,GENDER,STAFF_ID,USER_ID,IMAGE,PHONE,ADDRESS) values ('6','TEST_PROFILE_F',null,'test5@test.com','FEMALE',null,null,null,null,null);
Insert into HR_APP.PROFILES (ID,NAME,DESTINATION,EMAIL,GENDER,STAFF_ID,USER_ID,IMAGE,PHONE,ADDRESS) values ('7','TEST_PROFILE',null,'test6@test.com','MALE',null,null,null,null,null);
REM INSERTING into HR_APP.PROJECT_EMPLOYEES
SET DEFINE OFF;
Insert into HR_APP.PROJECT_EMPLOYEES (PROJECT_ID,EMPLOYEE_ID) values ('3','1');
REM INSERTING into HR_APP.PROJECTS
SET DEFINE OFF;
Insert into HR_APP.PROJECTS (ID,NAME) values ('1','TEST_PROJECT');
Insert into HR_APP.PROJECTS (ID,NAME) values ('2','TEST_PROJECT2');
Insert into HR_APP.PROJECTS (ID,NAME) values ('3','MANAGER_PROJECT');
REM INSERTING into HR_APP.REQUESTS_TIME_OFF
SET DEFINE OFF;
Insert into HR_APP.REQUESTS_TIME_OFF (ID,LEAVE_TYPE,REASON,START_DATE,END_DATE,STATUS,EMPLOYEE_ID) values ('6','UNPAID_LEAVE','holiday',to_date('25/04/10','RR/MM/DD'),to_date('25/04/15','RR/MM/DD'),'DRAFT','1');
Insert into HR_APP.REQUESTS_TIME_OFF (ID,LEAVE_TYPE,REASON,START_DATE,END_DATE,STATUS,EMPLOYEE_ID) values ('1','PAID_TIME_OFF','holiday',to_date('25/03/24','RR/MM/DD'),to_date('25/03/31','RR/MM/DD'),'DRAFT','2');
Insert into HR_APP.REQUESTS_TIME_OFF (ID,LEAVE_TYPE,REASON,START_DATE,END_DATE,STATUS,EMPLOYEE_ID) values ('2','SICK_LEAVE','sick',to_date('25/03/24','RR/MM/DD'),to_date('25/03/31','RR/MM/DD'),'PENDING','1');
Insert into HR_APP.REQUESTS_TIME_OFF (ID,LEAVE_TYPE,REASON,START_DATE,END_DATE,STATUS,EMPLOYEE_ID) values ('4','PAID_TIME_OFF','holiday',to_date('25/04/10','RR/MM/DD'),to_date('25/04/15','RR/MM/DD'),'DRAFT','1');
Insert into HR_APP.REQUESTS_TIME_OFF (ID,LEAVE_TYPE,REASON,START_DATE,END_DATE,STATUS,EMPLOYEE_ID) values ('5','SICK_LEAVE','sick',to_date('25/03/27','RR/MM/DD'),to_date('25/03/31','RR/MM/DD'),'PENDING','1');
REM INSERTING into HR_APP.ROLES
SET DEFINE OFF;
Insert into HR_APP.ROLES (NAME,ID) values ('ADMIN','1');
Insert into HR_APP.ROLES (NAME,ID) values ('USER','2');
Insert into HR_APP.ROLES (NAME,ID) values ('MANAGER','4');
REM INSERTING into HR_APP.TASKS
SET DEFINE OFF;
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('1','test1','New',null,null,null,null,null,'1',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('2','test2','New',to_date('25/03/31','RR/MM/DD'),null,null,null,null,'2',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('3','test3','New',to_date('25/04/25','RR/MM/DD'),null,null,to_date('25/03/24','RR/MM/DD'),null,'2',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('9','test8','New',to_date('25/04/25','RR/MM/DD'),null,'LOW',to_date('25/03/27','RR/MM/DD'),null,'3',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('5','test5','New',to_date('25/04/25','RR/MM/DD'),null,null,to_date('25/03/24','RR/MM/DD'),null,'3',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('7','test6','New',to_date('25/04/25','RR/MM/DD'),null,null,to_date('25/03/27','RR/MM/DD'),null,'3',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('8','test7','New',to_date('25/04/25','RR/MM/DD'),null,null,to_date('25/03/27','RR/MM/DD'),null,'3',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('10','test10','New',to_date('25/04/25','RR/MM/DD'),null,null,to_date('25/03/27','RR/MM/DD'),null,'2',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('11','test11','New',to_date('25/04/25','RR/MM/DD'),null,null,to_date('25/03/27','RR/MM/DD'),null,'2',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('12','test12','New',to_date('25/04/25','RR/MM/DD'),null,'HIGH',to_date('25/03/27','RR/MM/DD'),null,'2',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('13','test13','New',to_date('25/04/25','RR/MM/DD'),null,'HIGH',to_date('25/03/27','RR/MM/DD'),null,'2',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('14','test14','New',to_date('25/04/25','RR/MM/DD'),null,'LOW',to_date('25/03/27','RR/MM/DD'),null,'2',null);
Insert into HR_APP.TASKS (ID,NAME,STATUS,ESTIMATED_TASK_TIME_END,ESTIMATED_WORK_TIME,PRIORITY_STATUS,START_DATE,TYPE_TASK,PROJECT_ID,EMPLOYEE_ID) values ('15','Check all types for status task','NEW',to_date('25/04/25','RR/MM/DD'),null,'LOW',to_date('25/03/27','RR/MM/DD'),'NORMAL','1',null);
REM INSERTING into HR_APP.USER_ROLES
SET DEFINE OFF;
Insert into HR_APP.USER_ROLES (USER_ID,ROLE_ID) values ('1','2');
Insert into HR_APP.USER_ROLES (USER_ID,ROLE_ID) values ('5','2');
REM INSERTING into HR_APP.USERS
SET DEFINE OFF;
Insert into HR_APP.USERS (ID,EMAIL,PASSWORD,USERNAME) values ('1','test@test.com','test123','TEST1');
Insert into HR_APP.USERS (ID,EMAIL,PASSWORD,USERNAME) values ('2','test@test2.com','test123','TEST2');
Insert into HR_APP.USERS (ID,EMAIL,PASSWORD,USERNAME) values ('5','test@test7.com','test123','TEST7');
Insert into HR_APP.USERS (ID,EMAIL,PASSWORD,USERNAME) values ('3','test@test5.com','test123','TEST5');
--------------------------------------------------------
--  DDL for Index IDX_DICTIONARY_VALUES
--------------------------------------------------------

  CREATE INDEX "HR_APP"."IDX_DICTIONARY_VALUES" ON "HR_APP"."DICTIONARY_VALUES" ("DICTIONARY_ID", "VALUE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DEPARTMENT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_DEPARTMENT_ID" ON "HR_APP"."DEPARTMENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_EMPLOYEE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_EMPLOYEE_ID" ON "HR_APP"."EMPLOYEES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PROFILE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_PROFILE_ID" ON "HR_APP"."PROFILES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PROJECT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_PROJECT_ID" ON "HR_APP"."PROJECTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PROJECTS_EMPLOYEES
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_PROJECTS_EMPLOYEES" ON "HR_APP"."PROJECT_EMPLOYEES" ("PROJECT_ID", "EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_REQUESTS_TIME_OFF
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_REQUESTS_TIME_OFF" ON "HR_APP"."REQUESTS_TIME_OFF" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ROLE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_ROLE_ID" ON "HR_APP"."ROLES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_TASK_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_TASK_ID" ON "HR_APP"."TASKS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_USER_ROLES
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_USER_ROLES" ON "HR_APP"."USER_ROLES" ("USER_ID", "ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008275
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."SYS_C008275" ON "HR_APP"."USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008329
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."SYS_C008329" ON "HR_APP"."DICTIONARIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008333
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."SYS_C008333" ON "HR_APP"."DICTIONARY_VALUES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DEPARTMENT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_DEPARTMENT_ID" ON "HR_APP"."DEPARTMENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008329
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."SYS_C008329" ON "HR_APP"."DICTIONARIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008333
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."SYS_C008333" ON "HR_APP"."DICTIONARY_VALUES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IDX_DICTIONARY_VALUES
--------------------------------------------------------

  CREATE INDEX "HR_APP"."IDX_DICTIONARY_VALUES" ON "HR_APP"."DICTIONARY_VALUES" ("DICTIONARY_ID", "VALUE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_EMPLOYEE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_EMPLOYEE_ID" ON "HR_APP"."EMPLOYEES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PROFILE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_PROFILE_ID" ON "HR_APP"."PROFILES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PROJECTS_EMPLOYEES
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_PROJECTS_EMPLOYEES" ON "HR_APP"."PROJECT_EMPLOYEES" ("PROJECT_ID", "EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PROJECT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_PROJECT_ID" ON "HR_APP"."PROJECTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_REQUESTS_TIME_OFF
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_REQUESTS_TIME_OFF" ON "HR_APP"."REQUESTS_TIME_OFF" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ROLE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_ROLE_ID" ON "HR_APP"."ROLES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_TASK_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_TASK_ID" ON "HR_APP"."TASKS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_USER_ROLES
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."PK_USER_ROLES" ON "HR_APP"."USER_ROLES" ("USER_ID", "ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008275
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR_APP"."SYS_C008275" ON "HR_APP"."USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger AID_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HR_APP"."AID_USER" 
AFTER INSERT
ON users
FOR EACH ROW 
DECLARE
 v_role_id NUMBER;
BEGIN
    SELECT id INTO v_role_id from roles where name = 'USER';

        INSERT INTO USER_ROLES(user_id, role_id) 
        VALUES(:NEW.ID,v_role_id);

END;

/
ALTER TRIGGER "HR_APP"."AID_USER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AID_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HR_APP"."AID_USER" 
AFTER INSERT
ON users
FOR EACH ROW 
DECLARE
 v_role_id NUMBER;
BEGIN
    SELECT id INTO v_role_id from roles where name = 'USER';

        INSERT INTO USER_ROLES(user_id, role_id) 
        VALUES(:NEW.ID,v_role_id);

END;

/
ALTER TRIGGER "HR_APP"."AID_USER" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ASSIGN_EMPLOYEE_TO_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."ASSIGN_EMPLOYEE_TO_PROJECT" (
    p_project_id IN NUMBER,
    p_employee_id IN NUMBER
) AS
    v_project_id NUMBER;
    v_employee_id NUMBER;
    v_employee_id_to_project NUMBER;
BEGIN
    SELECT count(*) INTO v_project_id FROM PROJECTS WHERE id = p_project_id;
    SELECT count(*) INTO v_employee_id FROM EMPLOYEES WHERE id = p_employee_id;

    IF v_project_id = 0 OR  v_employee_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;

    SELECT count(*) INTO v_employee_id_to_project FROM project_employees 
    WHERE project_id = p_project_id AND employee_id = p_employee_id;

    IF v_employee_id_to_project > 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'The employee:' || v_employee_id_to_project ||' is already to assign to this project');
    END IF;

        INSERT INTO project_employees(project_id, employee_id)
        VALUES(p_project_id,p_employee_id);
--        UPDATE USER_ROLES SET
--        role_id = p_role_id
--        WHERE user_id = p_user_id;
--
--    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO FOUND SPECIFIED PROJECT ID: '|| p_project_id);
            DBMS_OUTPUT.PUT_LINE('NO FOUND SPECIFIED EMPLOYEE ID: '|| p_employee_id);
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_DEPARTMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_DEPARTMENT" (
    p_id NUMBER
)AS
    v_id NUMBER;
BEGIN
        SELECT id INTO v_id FROM DEPARTMENTS WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        DELETE FROM DEPARTMENTS
        WHERE id = p_id;
    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_EMPLOYEE" (
    p_id NUMBER
)AS
    v_id NUMBER;
BEGIN
        SELECT id INTO v_id FROM EMPLOYEES WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        DELETE FROM EMPLOYEES
        WHERE id = p_id;
    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_PROFILE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_PROFILE" (
    p_id NUMBER
)AS
    v_id NUMBER;
BEGIN
        SELECT id INTO v_id FROM PROFILES WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        DELETE FROM PROFILES
        WHERE id = p_id;
    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_PROJECT" (
    p_id NUMBER
)AS
    v_id NUMBER;
BEGIN
        SELECT id INTO v_id FROM PROJECTS WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        DELETE FROM PROJECTS
        WHERE id = p_id;
    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_REQUEST_TIME_OFF
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_REQUEST_TIME_OFF" (
    p_id IN NUMBER
) AS
    v_id NUMBER;
BEGIN 
    SELECT COUNT(*) INTO v_id FROM requests_time_off WHERE id = p_id;

    IF v_id = 0 THEN 
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    ELSE
        DELETE FROM requests_time_off
    WHERE id = p_id;   
    END IF;

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_ROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_ROLE" (
    p_id NUMBER
)AS
    v_id NUMBER;
BEGIN
    SELECT id INTO v_id FROM ROLES WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    ELSE
        DELETE FROM ROLES
        WHERE id = p_id;
    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_TASK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_TASK" (
    p_id IN NUMBER
) AS
    v_id NUMBER;
BEGIN 
        SELECT COUNT(*) INTO v_id FROM TASKS WHERE id = p_id;

        IF v_id = 0 THEN 
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

        ELSE
            DELETE FROM TASKS
            WHERE id = p_id;

        END IF;
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."DELETE_USER" (
    p_id NUMBER
)AS
    v_id NUMBER;
BEGIN
        SELECT id INTO v_id FROM USERS WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        DELETE FROM USERS
        WHERE id = p_id;
    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_DEPARTMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_DEPARTMENT" (
    p_department IN VARCHAR2
) AS
    v_count_department NUMBER;
BEGIN 
    -- chcek the department is exist
    SELECT COUNT(*) INTO v_count_department FROM DEPARTMENTS WHERE name = p_department;

    -- if department exist, report an error
    IF v_count_department > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Exist this department: '|| CHR(9) || p_department );
    END IF;

    -- if all is ok, create new department
    INSERT INTO DEPARTMENTS(name)
    VALUES(p_department);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_EMPLOYEE" (
    p_name IN VARCHAR2,
    p_department IN VARCHAR2,
    p_department_id IN NUMBER,
    p_position IN VARCHAR2,
    p_staff_id IN NUMBER,
    p_type_of_contract IN VARCHAR2,
    p_image IN VARCHAR2,
    p_phone IN VARCHAR2,
    p_address IN VARCHAR2
) AS
    v_position NUMBER;
    v_department NUMBER;
    v_contract NUMBER;
BEGIN 

    IF p_position IS NOT NULL THEN
        SELECT COUNT(*) INTO v_position FROM DICTIONARY_VALUES WHERE dictionary_id = 1 AND value = p_position;
            IF v_position = 0 THEN
                RAISE_APPLICATION_ERROR(-20009, 'Invalid position');
            END IF;
        ELSE
        v_position := NULL;
    END IF;

    IF p_department IS NOT NULL THEN
        SELECT COUNT(*) INTO v_department FROM DICTIONARY_VALUES WHERE dictionary_id = 2 AND value = p_department;
            IF v_department = 0 THEN 
                RAISE_APPLICATION_ERROR(-20009, 'Invalid department');
            END IF;
        ELSE
        v_department := NULL;
    END IF;

    IF p_type_of_contract IS NOT NULL THEN 
        SELECT COUNT(*) INTO v_contract FROM DICTIONARY_VALUES WHERE dictionary_id = 3 AND value = p_type_of_contract;
            IF v_contract = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid type of contract');
            END IF;
        ELSE
        v_contract := NULL;
    END IF;
    -- if all is ok, create new profile
    INSERT INTO EMPLOYEES(name, department, department_id, position, staff_id, type_of_contract, image, phone, address)
    VALUES(p_name, p_department, p_department_id, p_position, p_staff_id, p_type_of_contract, p_image, p_phone, p_address);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_PROFILE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_PROFILE" (
    p_name IN VARCHAR2,
    p_desctination IN VARCHAR2,
    p_email IN VARCHAR2,
    p_gender IN VARCHAR2,
    p_staff_id IN NUMBER,
    p_user_id IN NUMBER,
    p_image IN VARCHAR2,
    p_phone IN VARCHAR2,
    p_address IN VARCHAR2
) AS
    v_gender NUMBER;
BEGIN 

    IF p_gender IS NOT NULL THEN
        SELECT COUNT(*) INTO v_gender FROM DICTIONARY_VALUES WHERE dictionary_id = 5 AND value = p_gender;
            IF v_gender = 0 THEN
                RAISE_APPLICATION_ERROR(-20005, 'Invalid gender');
            END IF;
        ELSE
        v_gender := NULL;
    END IF;

    -- if all is ok, create new profile
    INSERT INTO PROFILES(id, name, destination, email, gender, staff_id, user_id, image, phone,address)
    VALUES(increment_profile.NEXTVAL, p_name, p_desctination, p_email, p_gender, p_staff_id, p_user_id, p_image, p_phone, p_address);

--    END;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_PROJECT" (
    p_project IN VARCHAR2
) AS
    v_count_project NUMBER;
BEGIN 
    -- chcek the project is exist
    SELECT COUNT(*) INTO v_count_project FROM PROJECTS WHERE name = p_project;

    -- if project exist, report an error
    IF v_count_project > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Exist this project: '|| CHR(9) || p_project );
    END IF;

    -- if all is ok, create new project
    INSERT INTO PROJECTS(id, name)
    VALUES(increment_project.NEXTVAL, p_project);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_REQUEST_TIME_OFF
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_REQUEST_TIME_OFF" (
    p_leave_type IN VARCHAR2,
    p_reason IN VARCHAR2,
    p_start_date IN DATE,
    p_end_date IN DATE,
    p_status IN VARCHAR2,
    p_employee_id IN NUMBER
) AS
    v_status VARCHAR2(50);
    v_employee_id NUMBER;
    v_leave_type NUMBER;
    v_now DATE := SYSDATE;
BEGIN 
    IF p_reason IS NULL OR LENGTH(p_reason) = 0 THEN 
        RAISE_APPLICATION_ERROR(-20004, 'Reason cannot be empty');
    END IF;

    IF p_status IS NULL THEN
        v_status := 'DRAFT';
    END IF;

    IF (p_start_date < v_now OR p_end_date < v_now) AND p_end_date > p_start_date THEN
        RAISE_APPLICATION_ERROR(-20008, 'The end date cannot be in the past');
    END IF;

    IF p_leave_type IS NOT NULL THEN
        SELECT COUNT(*) INTO v_leave_type FROM DICTIONARY_VALUES WHERE dictionary_id = 4 AND value = p_leave_type;
        IF v_leave_type = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid type of leave');
        END IF;
    ELSE
        RAISE_APPLICATION_ERROR(-20004, 'Type of leave cannot be empty');
    END IF;

    SELECT COUNT(*) INTO v_employee_id FROM employees WHERE id = p_employee_id;
    IF v_employee_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;

    -- if all is ok, create new tak
    INSERT INTO requests_time_off(leave_type, reason, start_date, end_date, status, employee_id )
    VALUES(p_leave_type,p_reason,p_start_date,p_end_date,v_status,p_employee_id);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_ROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_ROLE" (
    p_role IN VARCHAR2
) AS
    v_count_role NUMBER;
BEGIN 
    -- chcek the role is exist
    SELECT COUNT(*) INTO v_count_role FROM ROLES WHERE name = p_role;

    -- if role exist, report an error
    IF v_count_role > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Exist this role: '|| CHR(9) || p_role );
    END IF;

    -- if all is ok, create new role
    INSERT INTO ROLES(name)
    VALUES(p_role);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_TASK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_TASK" (
    p_name IN VARCHAR2,
    p_status IN VARCHAR2,
    p_estimated_task_time_end IN DATE,
    p_estimated_work_time IN DATE,
    p_priority_status IN VARCHAR2,
    p_start_date IN DATE,
    p_type_task IN VARCHAR2,
    p_project_id IN NUMBER,
    p_employee_id IN NUMBER
) AS
    v_name VARCHAR2(50);
    v_status VARCHAR2(20);
    v_project_id NUMBER;
    v_employee_id_to_project NUMBER;
    v_priority_status VARCHAR2(30);
    v_priority_status_count NUMBER;
    v_type_task VARCHAR2(30);
    v_type_task_count NUMBER;
    v_now DATE := SYSDATE;
BEGIN 

    -- chcek taks with this name is exist
    SELECT COUNT(*) INTO v_name FROM TASKS WHERE name = p_name;
    IF v_name IS NULL OR LENGTH(v_name) = 0 THEN 
        RAISE_APPLICATION_ERROR(-20004, 'Name cannot be empty');
    END IF;
    -- if name exist, report an error
    IF v_name > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Exist this name: '|| CHR(9) || p_name );
    END IF;

    IF p_start_date < v_now OR p_estimated_task_time_end < v_now THEN
        RAISE_APPLICATION_ERROR(-20008, 'The end date cannot be in the past');
    END IF;

    IF p_status IS NULL THEN
        v_status := 'New';
    END IF;

   IF p_priority_status IS NOT NULL THEN
        SELECT COUNT(*) INTO v_priority_status_count FROM DICTIONARY_VALUES WHERE dictionary_id = 7 AND value = p_priority_status;
        IF v_priority_status_count = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid priority status');
        END IF;
        v_priority_status := p_priority_status;
    ELSE
        v_priority_status := 'LOW';
    END IF;

    IF p_type_task IS NOT NULL THEN
        SELECT COUNT(*) INTO v_type_task_count FROM DICTIONARY_VALUES WHERE dictionary_id = 8 AND value = p_type_task;
        IF v_type_task_count = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid type of task');
        END IF;
        v_type_task := p_type_task;
    ELSE
        v_type_task := 'NORMAL';
    END IF;

    SELECT COUNT(*) INTO v_project_id FROM projects WHERE id = p_project_id;
    IF v_project_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'The project:' || v_project_id ||' is not exist');
    END IF; 

    -- if all is ok, create new tak
    INSERT INTO TASKS(name, status, estimated_task_time_end, estimated_work_time, priority_status, start_date, type_task, project_id, employee_id)
    VALUES(p_name,v_status, p_estimated_task_time_end, p_estimated_work_time, v_priority_status, p_start_date, v_type_task, p_project_id, p_employee_id);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEW_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."NEW_USER" (
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_username IN VARCHAR2
) AS
    v_count_email NUMBER;
    v_count_username NUMBER;
BEGIN 
    -- chcek user with this email is exist
    SELECT COUNT(*) INTO v_count_email FROM USERS WHERE email = p_email;
    -- if email exist, report an error
    IF v_count_email > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Exist this email: '|| CHR(9) || p_email );
    END IF;

    -- chcek user with this username is exist
    SELECT COUNT(*) INTO v_count_username FROM USERS WHERE username = p_username;
    -- if username exist, report an error
    IF v_count_username > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Exist this username: '|| CHR(9) || p_username );
    END IF;

    -- if all is ok, create new user
    INSERT INTO USERS(email, password, username)
    VALUES(p_email, p_password, p_username);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_ASSIGN_EMPLOYEE_TO_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_ASSIGN_EMPLOYEE_TO_PROJECT" (
    p_project_id IN NUMBER,
    p_employee_id IN NUMBER
)
AS 
    v_project_id NUMBER;
    v_employee_id NUMBER;
    v_employee_id_to_project NUMBER;
BEGIN
    SELECT count(*) INTO v_project_id FROM PROJECT_EMPLOYEES WHERE project_id = p_project_id;
    SELECT id INTO v_employee_id FROM EMPLOYEES WHERE id = p_employee_id;

    IF v_project_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;   

    SELECT count(*) INTO v_employee_id_to_project FROM project_employees 
    WHERE project_id = p_project_id AND employee_id = p_employee_id;

    IF v_employee_id_to_project > 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'The employee:' || v_employee_id_to_project ||' is already to assign to this project');
    ELSE 
        UPDATE PROJECT_EMPLOYEES SET
        employee_id = v_employee_id
        WHERE project_id = p_project_id;
    END IF;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO FOUND SPECIFIED EMPLOYEE ID: '|| p_employee_id);

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_DEPARTMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_DEPARTMENT" (
    p_id NUMBER,
    p_name IN VARCHAR2
) AS
    v_id NUMBER;
BEGIN
    SELECT id INTO v_id FROM DEPARTMENTS WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        IF p_name IS NULL OR LENGTH(p_name) = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'The name cannot be empty.');
        END IF;

        UPDATE DEPARTMENTS SET
        name = p_name
        WHERE id = p_id;

    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_EMPLOYEE" (
    p_id NUMBER,
    p_name IN VARCHAR2,
    p_department IN VARCHAR2,
    p_department_id IN NUMBER,
    p_position IN VARCHAR2,
    p_staff_id IN NUMBER,
    p_type_of_contract IN VARCHAR2,
    p_image IN VARCHAR2,
    p_phone IN VARCHAR2,
    p_address IN VARCHAR2
) AS
    v_id NUMBER;
    v_position NUMBER;
    v_department NUMBER;
    v_contract NUMBER;
BEGIN
    SELECT id INTO v_id FROM EMPLOYEES WHERE id = p_id;
    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;

    IF p_name IS NULL OR LENGTH(p_name) = 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'The name cannot be empty.');
    END IF;

    IF p_position IS NOT NULL THEN
        SELECT COUNT(*) INTO v_position FROM DICTIONARY_VALUES WHERE dictionary_id = 1 AND value = p_position;
            IF v_position = 0 THEN
                RAISE_APPLICATION_ERROR(-20009, 'Invalid position');
            END IF;
        ELSE
        v_position := NULL;
    END IF;

    IF p_department IS NOT NULL THEN
        SELECT COUNT(*) INTO v_department FROM DICTIONARY_VALUES WHERE dictionary_id = 2 AND value = p_department;
            IF v_department = 0 THEN 
                RAISE_APPLICATION_ERROR(-20009, 'Invalid department');
            END IF;
        ELSE
        v_department := NULL;
    END IF;

    IF p_type_of_contract IS NOT NULL THEN 
        SELECT COUNT(*) INTO v_contract FROM DICTIONARY_VALUES WHERE dictionary_id = 3 AND value = p_type_of_contract;
            IF v_contract = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid type of contract');
            END IF;
        ELSE
        v_contract := NULL;
    END IF;

    UPDATE EMPLOYEES SET
        name = p_name,
        department = p_department,
        department_id = p_department_id,
        position = p_position,
        staff_id = p_staff_id,
        type_of_contract = p_type_of_contract,
        image = p_image,
        phone = p_phone,
        address = p_address
    WHERE id = p_id;

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PROFILE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_PROFILE" (
    p_id NUMBER,
    p_name IN VARCHAR2,
    p_destination IN VARCHAR2,
    p_email IN VARCHAR2,
    p_gender IN VARCHAR2,
    p_staff_id IN NUMBER,
    p_user_id IN NUMBER,
    p_image IN VARCHAR2,
    p_phone IN VARCHAR2,
    p_address IN VARCHAR2
) AS
    v_id NUMBER;
    v_gender NUMBER;
BEGIN
    SELECT id INTO v_id FROM PROFILES WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;
    IF p_name IS NULL OR LENGTH(p_name) = 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'The name cannot be empty.');
    END IF;
        IF p_gender IS NOT NULL THEN
        SELECT COUNT(*) INTO v_gender FROM DICTIONARY_VALUES WHERE dictionary_id = 5 AND value = p_gender;
            IF v_gender = 0 THEN
                RAISE_APPLICATION_ERROR(-20005, 'Invalid gender');
            END IF;
        ELSE
        v_gender := NULL;
    END IF;

    UPDATE PROFILES SET
        name = p_name,
        destination = p_destination,
        email = p_email,
        gender = p_gender,
        staff_id = p_staff_id,
        user_id = p_user_id,
        image = p_image,
        phone = p_phone,
        address = p_address
    WHERE id = p_id;


COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_PROJECT" (
    p_id NUMBER,
    p_name IN VARCHAR2
) AS
    v_id NUMBER;
BEGIN
    SELECT id INTO v_id FROM PROJECTS WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        IF p_name IS NULL OR LENGTH(p_name) = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'The name cannot be empty.');
        END IF;

        UPDATE PROJECTS SET
        name = p_name
        WHERE id = p_id;

    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_REQUEST_TIME_OFF
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_REQUEST_TIME_OFF" (
    p_id IN NUMBER,
    p_leave_type IN VARCHAR2,
    p_reason IN VARCHAR2,
    p_start_date IN DATE,
    p_end_date IN DATE,
    p_status IN VARCHAR2,
    p_employee_id IN NUMBER
) AS
    v_id NUMBER;
    v_status VARCHAR2(50);
    v_status_count NUMBER;
    v_employee_id NUMBER;
    v_leave_type NUMBER;
    v_now DATE := SYSDATE;
BEGIN 
    IF p_reason IS NULL OR LENGTH(p_reason) = 0 THEN 
        RAISE_APPLICATION_ERROR(-20004, 'Reason cannot be empty');
    END IF;

    IF p_status IS NOT NULL THEN
        SELECT COUNT(*) INTO v_status_count FROM DICTIONARY_VALUES WHERE dictionary_id = 9 AND value = p_status;
        IF v_status_count = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid status');
        END IF;
        v_status := p_status;
    ELSE
        v_status := 'DRAFT';
    END IF;

    IF (p_start_date < v_now OR p_end_date < v_now) AND p_end_date > p_start_date THEN
        RAISE_APPLICATION_ERROR(-20008, 'The end date cannot be in the past');
    END IF;

    IF p_leave_type IS NOT NULL THEN
        SELECT COUNT(*) INTO v_leave_type FROM DICTIONARY_VALUES WHERE dictionary_id = 4 AND value = p_leave_type;
        IF v_leave_type = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid type of leave');
        END IF;
    ELSE
        RAISE_APPLICATION_ERROR(-20004, 'Type of leave cannot be empty');
    END IF;

    SELECT COUNT(*) INTO v_employee_id FROM employees WHERE id = p_employee_id;
    IF v_employee_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;

    UPDATE requests_time_off SET 
        leave_type = p_leave_type,
        reason = p_reason,
        start_date = p_start_date, 
        end_date = p_end_date,
        status = v_status,
        employee_id = p_employee_id
   WHERE id = p_id;

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_ROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_ROLE" (
    p_id NUMBER,
    p_name IN VARCHAR2
) AS
    v_id NUMBER;
BEGIN
    SELECT id INTO v_id FROM ROLES WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        IF p_name IS NULL OR LENGTH(p_name) = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'The name cannot be empty.');
        END IF;

        UPDATE ROLES SET
        name = p_name
        WHERE id = p_id;

    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_TASK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_TASK" (
    p_id NUMBER,
    p_name IN VARCHAR2,
    p_status IN VARCHAR2,
    p_estimated_task_time_end IN DATE,
    p_estimated_work_time IN DATE,
    p_priority_status IN VARCHAR2,
    p_start_date IN DATE,
    p_type_task IN VARCHAR2,
    p_project_id IN NUMBER,
    p_employee_id IN NUMBER
) AS
    v_id NUMBER;
    v_name VARCHAR2(50);
    v_status VARCHAR2(20);
    v_status_count NUMBER;
    v_project_id NUMBER;
    v_employee_id NUMBER;
    v_priority_status VARCHAR2(30);
    v_priority_status_count NUMBER;
    v_type_task VARCHAR2(30);
    v_type_task_count NUMBER;
    v_now DATE := SYSDATE;
BEGIN 

    SELECT COUNT(*) INTO v_id FROM TASKS WHERE id = p_id;
    IF v_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;

    SELECT COUNT(*) INTO v_project_id FROM projects WHERE id = p_project_id;
    IF v_project_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    END IF;

    IF p_employee_id IS NOT NULL THEN 
        SELECT COUNT(*) INTO v_employee_id FROM project_employees WHERE employee_id= p_employee_id;
        IF v_employee_id = 0 THEN 
            RAISE_APPLICATION_ERROR(-20010, 'The employee is not assigned to this project.');
        END IF;
    ELSE 
        v_employee_id := NULL;
    END IF;

    SELECT COUNT(*) INTO v_name FROM TASKS WHERE name = p_name;
    IF v_name IS NULL OR LENGTH(v_name) = 0 THEN 
        RAISE_APPLICATION_ERROR(-20004, 'Name cannot be empty');
    END IF;

    IF p_status IS NOT NULL THEN
        SELECT COUNT(*) INTO v_status_count FROM DICTIONARY_VALUES WHERE dictionary_id = 6 AND value = p_status;
        IF v_status_count = 0  THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid status');
        END IF;
        v_status := p_status;
    ELSE 
        v_status := 'NEW';
    END IF;

    IF p_start_date < v_now OR p_estimated_task_time_end < v_now THEN
        RAISE_APPLICATION_ERROR(-20008, 'The end date cannot be in the past');
    END IF;

   IF p_priority_status IS NOT NULL THEN
        SELECT COUNT(*) INTO v_priority_status_count FROM DICTIONARY_VALUES WHERE dictionary_id = 7 AND value = p_priority_status;
        IF v_priority_status_count = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid priority status');
        END IF;
        v_priority_status := p_priority_status;
    ELSE
        v_priority_status := 'LOW';
    END IF;

    IF p_type_task IS NOT NULL THEN
        SELECT COUNT(*) INTO v_type_task_count FROM DICTIONARY_VALUES WHERE dictionary_id = 8 AND value = p_type_task;
        IF v_type_task_count = 0 THEN
            RAISE_APPLICATION_ERROR(-20009, 'Invalid type of task');
        END IF;
        v_type_task := p_type_task;
    ELSE
        v_type_task := 'NORMAL';
    END IF;

    UPDATE TASKS SET
        name = p_name, 
        status = v_status,
        estimated_task_time_end = p_estimated_task_time_end,
        estimated_work_time = p_estimated_work_time,
        priority_status = v_priority_status,
        start_date = p_start_date,
        type_task = v_type_task,
        project_id = p_project_id,
        employee_id = v_employee_id
    WHERE id = p_id;

COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_USER" (
    p_id NUMBER,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_username IN VARCHAR2
) AS
    v_id NUMBER;
BEGIN
    SELECT id INTO v_id FROM USERS WHERE id = p_id;

    IF v_id <> p_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');

    ELSE
        IF p_email IS NULL OR LENGTH(p_email) = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'The email cannot be empty.');
        END IF;
        IF p_password IS NULL OR LENGTH(p_password) = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'The password cannot be empty.');
        END IF;
        IF p_username IS NULL OR LENGTH(p_username) = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'The username cannot be empty.');
        END IF;

        UPDATE USERS SET
        email = p_email,
        password = p_password,
        username = p_username
        WHERE id = p_id;

    END IF;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_USER_ROLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "HR_APP"."UPDATE_USER_ROLES" (
    p_user_id IN NUMBER,
    p_role_id IN NUMBER
) AS
    v_user_id NUMBER;
    v_role_id NUMBER;
BEGIN
    SELECT user_id INTO v_user_id FROM USER_ROLES WHERE user_id = p_user_id;
    SELECT id INTO v_role_id FROM ROLES WHERE id = p_role_id;

    IF v_user_id <> p_user_id THEN
        RAISE_APPLICATION_ERROR(-20003, 'The record with the specified ID does not exist.');
    ELSE        
        UPDATE USER_ROLES SET
        role_id = p_role_id
        WHERE user_id = p_user_id;
    END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO FOUND SPECIFIED ROLE ID: '|| p_role_id);
COMMIT;
END;

/
--------------------------------------------------------
--  Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "HR_APP"."DEPARTMENTS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."DEPARTMENTS" ADD CONSTRAINT "PK_DEPARTMENT_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DICTIONARIES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."DICTIONARIES" MODIFY ("DICTIONARY_NAME" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."DICTIONARIES" MODIFY ("DICTIONARY_CODE" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."DICTIONARIES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DICTIONARY_VALUES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."DICTIONARY_VALUES" MODIFY ("DICTIONARY_ID" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."DICTIONARY_VALUES" MODIFY ("VALUE" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."DICTIONARY_VALUES" MODIFY ("DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."DICTIONARY_VALUES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."EMPLOYEES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."EMPLOYEES" ADD CONSTRAINT "PK_EMPLOYEE_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROFILES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."PROFILES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."PROFILES" ADD CONSTRAINT "PK_PROFILE_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROJECT_EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."PROJECT_EMPLOYEES" ADD CONSTRAINT "PK_PROJECTS_EMPLOYEES" PRIMARY KEY ("PROJECT_ID", "EMPLOYEE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROJECTS
--------------------------------------------------------

  ALTER TABLE "HR_APP"."PROJECTS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."PROJECTS" ADD CONSTRAINT "PK_PROJECT_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REQUESTS_TIME_OFF
--------------------------------------------------------

  ALTER TABLE "HR_APP"."REQUESTS_TIME_OFF" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."REQUESTS_TIME_OFF" MODIFY ("START_DATE" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."REQUESTS_TIME_OFF" MODIFY ("END_DATE" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."REQUESTS_TIME_OFF" ADD CONSTRAINT "PK_REQUESTS_TIME_OFF" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROLES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."ROLES" ADD CONSTRAINT "PK_ROLE_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TASKS
--------------------------------------------------------

  ALTER TABLE "HR_APP"."TASKS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."TASKS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."TASKS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."TASKS" ADD CONSTRAINT "PK_TASK_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_ROLES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."USER_ROLES" ADD CONSTRAINT "PK_USER_ROLES" PRIMARY KEY ("USER_ID", "ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "HR_APP"."USERS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."USERS" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "HR_APP"."USERS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PROJECT_EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."PROJECT_EMPLOYEES" ADD CONSTRAINT "FK_PROJECT_ID" FOREIGN KEY ("PROJECT_ID")
	  REFERENCES "HR_APP"."PROJECTS" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "HR_APP"."PROJECT_EMPLOYEES" ADD CONSTRAINT "FK_EMPLOYEE_ID" FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES "HR_APP"."EMPLOYEES" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REQUESTS_TIME_OFF
--------------------------------------------------------

  ALTER TABLE "HR_APP"."REQUESTS_TIME_OFF" ADD CONSTRAINT "FK_REQUEST_EMPLOYEE_ID" FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES "HR_APP"."EMPLOYEES" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TASKS
--------------------------------------------------------

  ALTER TABLE "HR_APP"."TASKS" ADD CONSTRAINT "FK_TASK_PROJECT_ID" FOREIGN KEY ("PROJECT_ID")
	  REFERENCES "HR_APP"."PROJECTS" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USER_ROLES
--------------------------------------------------------

  ALTER TABLE "HR_APP"."USER_ROLES" ADD CONSTRAINT "FK_USER_ID" FOREIGN KEY ("USER_ID")
	  REFERENCES "HR_APP"."USERS" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "HR_APP"."USER_ROLES" ADD CONSTRAINT "FK_ROLE_ID" FOREIGN KEY ("ROLE_ID")
	  REFERENCES "HR_APP"."ROLES" ("ID") ON DELETE CASCADE ENABLE;
